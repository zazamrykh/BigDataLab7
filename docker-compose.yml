version: "3.9"

services:
  # MS SQL Server
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: food-clustering-mssql
    env_file:
      - .env
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}   # используем переменную из .env
    ports:
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql          # данные MSSQL
      - ./scripts/mssql:/docker-entrypoint-initdb.d   # скрипты инициализации
    networks:
      - food-clustering-network
    healthcheck:
      test: ["CMD", "bash", "-c", "exec 3<>/dev/tcp/localhost/1433"]
      interval: 10s
      timeout: 5s
      retries: 5

  mssql-init:
    image: mcr.microsoft.com/mssql-tools
    container_name: food-clustering-mssql-init
    depends_on:
      - mssql
    environment:
      - SA_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./scripts/mssql:/scripts
    entrypoint: >
      bash -c "
        echo 'Waiting for MSSQL...'
        until /opt/mssql-tools/bin/sqlcmd -S mssql -U sa -P $$SA_PASSWORD -Q 'SELECT 1' &>/dev/null; do
          echo 'MSSQL not ready yet...'
          sleep 5
        done
        echo 'MSSQL is ready, running scripts'
        /opt/mssql-tools/bin/sqlcmd -S mssql -U sa -P $$SA_PASSWORD -i /scripts/01_create_database.sql
        /opt/mssql-tools/bin/sqlcmd -S mssql -U sa -P $$SA_PASSWORD -i /scripts/02_create_tables.sql
        /opt/mssql-tools/bin/sqlcmd -S mssql -U sa -P $$SA_PASSWORD -i /scripts/03_insert_test_data.sql
      "
    networks:
      - food-clustering-network

  # Приложение FastAPI
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: food-clustering-app
    depends_on:
      - mssql
    ports:
      - "8000:8000"
    volumes:
      - ./model:/app/model
    env_file:
      - .env
    environment:
      - MSSQL_SERVER=mssql
      - MSSQL_PORT=1433
      - MSSQL_DATABASE=${DB_NAME}
      - MSSQL_USERNAME=${DB_USER}
      - MSSQL_PASSWORD=${DB_PASSWORD}
    networks:
      - food-clustering-network

  # Витрина данных на Scala
  datamart:
    build:
      context: .
      dockerfile: docker/Dockerfile.datamart
    container_name: food-clustering-datamart
    depends_on:
      - mssql
    ports:
      - "8080:8080"  # Порт для API витрины
    volumes:
      - ./data:/app/data  # Для доступа к parquet-файлам
    env_file:
      - .env
    environment:
      - DB_SERVER=mssql
      - DB_PORT=1433
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - food-clustering-network

networks:
  food-clustering-network:
    driver: bridge

volumes:
  mssql-data:
